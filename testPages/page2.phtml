<!DOCTYPE html>
<html>

<head>
    <script src="../node_modules/knockout/build/output/knockout-latest.debug.js"></script>
    <style>
        body {
            font-family: arial;
            font-size: 14px;
        }
        
        .liveExample {
            padding: 1em;
            background-color: #EEEEDD;
            border: 1px solid #CCC;
            max-width: 655px;
        }
        
        .liveExample input {
            font-family: Arial;
        }
        
        .liveExample b {
            font-weight: bold;
        }
        
        .liveExample p {
            margin-top: 0.9em;
            margin-bottom: 0.9em;
        }
        
        .liveExample select[multiple] {
            width: 100%;
            height: 8em;
        }
        
        .liveExample h2 {
            margin-top: 0.4em;
            font-weight: bold;
            font-size: 1.2em;
        }
    </style>
</head>

<body>
    <h1>42</h1>
    <h1>foo</h1>
    <h1>foobar</h1>
    <h2>ko bum ko</h2>
    <p>First name:
        <input data-bind="value: firstName" />
    </p>
    <p>Last name:
        <input data-bind="value: lastName" />
    </p>
    <h2>Hello, <span data-bind="text: fullName"> </span>!</h2>
    
    <!-- ko data-bind="foreach: myItems" -->
        <div>Item <span data-bind="text: $data"></span></div>
    <!-- /ko -->
    
    <!-- I am a normal comment -->

    <ul data-bind="foreach: myItems">
        <li data-bind="text: $data"></li>
    </ul>

    <script>
        var ViewModel = function(first, last) {
            this.firstName = ko.observable(first);
            this.lastName = ko.observable(last);

            this.fullName = ko.computed(function() {
                // Knockout tracks dependencies automatically. It knows that fullName depends on firstName and lastName, because these get called when evaluating fullName.
                return this.firstName() + " " + this.lastName();
            }, this);
            this.myItems = ['A', 'B', 'C'];
        };

        ko.applyBindings(new ViewModel("Planet", "Earth")); // This makes Knockout get to work

    </script>
</body>

</html>